# -*- coding: utf-8 -*-
"""AllanSDK_DataAnalysis001_SingleCellAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1L8f3tsWY-ObxN97NdWQsVd_zIk3ros98

Installing the Allen SDK
"""

# 1. Install a modern NumPy that works with Python 3.12
!pip install "numpy>=1.26,<2.0"

# 2. Install AllenSDK without trying to downgrade NumPy
!pip install allensdk --no-deps

# 3. Manually install its dependencies
!pip install psycopg2-binary hdmf h5py matplotlib pandas requests scipy scikit-learn tqdm
!pip install argschema boto3 glymur ndx-events pynrrd pynwb scikit-build semver SimpleITK

"""Imports and Verify that the SDK has been installed correctly"""

import allensdk
print("AllenSDK version:", allensdk.__version__)

# Try a common module
from allensdk.core.brain_observatory_cache import BrainObservatoryCache
import allensdk.brain_observatory.stimulus_info as stim_info
import pprint
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
print("BrainObservatoryCache loaded successfully!")
boc = BrainObservatoryCache(manifest_file='boc/manifest.json')

"""Getting the single cell data we want to explore and the inputs."""

# --- Inputs  ---
container_id = 	511510753  # replace with your experiment ID
cell_id = None                # set to a specific cell ID or None for first cell
ori_choice = 90.0             # orientation of interest (deg)
sf_choice = 0.08              # spatial frequency
phase_choice = 0.5            # phase

# --- Get all experiments in that container ---
exps = boc.get_ophys_experiments(experiment_container_ids=[container_id])
print(f"Experiments in container {container_id}: {len(exps)}")
pprint.pprint(exps)

# --- Filter for the experiment with static gratings (Session B) ---
static_exp = boc.get_ophys_experiments(
    experiment_container_ids=[container_id],
    stimuli=[stim_info.STATIC_GRATINGS]
)[0]

exp_id = static_exp['id']
print(f"\nUsing Session B experiment with static gratings. Ophys experiment ID: {exp_id}")

# --- Load dataset ---
dataset = boc.get_ophys_experiment_data(exp_id)

"""Creating a table to use for analysis"""

# -----------------------------
# Load data
# -----------------------------

# Select cell
cell_ids = dataset.get_cell_specimen_ids()
if cell_id is None:
    cell_id = cell_ids[0]

times = dataset.get_fluorescence_timestamps()
_, dff_traces = dataset.get_dff_traces([cell_id])
trace = dff_traces[0]

# Stimulus table for static gratings
stim_table = dataset.get_stimulus_table("static_gratings")

# Filter for your chosen orientation, SF, and phase
subset = stim_table[
    (stim_table["orientation"] == ori_choice) &
    (stim_table["spatial_frequency"] == sf_choice) &
    (stim_table["phase"] == phase_choice)
]

print(f"Found {len(subset)} trials for ori={ori_choice}, sf={sf_choice}, phase={phase_choice}")

"""First, plot trial by trial for one specific stimulus (one specific phase, orientation, and phase)"""

#----------------------------
# Plot each trial separately
# --------------------------
for i, trial in subset.iterrows():
    stim_start_time = times[int(trial["start"])]
    stim_end_time   = times[int(trial["end"])]

    mask = (times >= stim_start_time) & (times <= stim_end_time)

    trial_time = times[mask] - stim_start_time   # reset to 0 at stimulus onset
    trial_trace = trace[mask]

    plt.figure(figsize=(8,4))
    plt.plot(trial_time, trial_trace, color="blue", label="dF/F")
    plt.axvspan(0, stim_end_time - stim_start_time, color="green", alpha=0.2, label="Stimulus ON")

    plt.xlabel("Time from stimulus onset (s)")
    plt.ylabel("dF/F")
    plt.title(f"Experiment {experiment_id} | Cell {cell_id}\n"
              f"Static Gratings | Trial {i}\n"
              f"Orientation={ori_choice}Â° | SF={sf_choice} | Phase={phase_choice}")
    plt.legend()
    plt.grid(True)
    plt.show()

"""Create a heatmap of all the trials, activity will be on the verical axis and time on the horizontal axis."""

# --- Choose one cell ---
cell_ids = dataset.get_cell_specimen_ids()
cell_id = cell_ids[0]  # you can change this manually
_, dff_traces = dataset.get_dff_traces([cell_id])
trace = dff_traces[0]
times = dataset.get_fluorescence_timestamps()

# --- Stimulus table ---
stimulus_name = "static_gratings"
stim_table = dataset.get_stimulus_table(stimulus_name)

# --- Trial window (before and after stimulus) ---
pre_time = 1.0   # 1s before stim
post_time = 2.0  # 2s after stim

trial_responses = []
trial_labels = []

for _, trial in stim_table.iterrows():
    stim_start_time = times[int(trial["start"])]
    stim_end_time   = times[int(trial["end"])]

    # mask to include pre/post stimulus
    mask = (times >= stim_start_time - pre_time) & (times <= stim_end_time + post_time)
    trial_trace = trace[mask]

    # normalize trial length by padding/truncating
    max_len = max([len(trace[mask]) for _, trial in stim_table.iterrows()])
    padded_trace = np.full(max_len, np.nan)
    padded_trace[:len(trial_trace)] = trial_trace

    trial_responses.append(padded_trace)

    # keep metadata label (orientation, sf, phase)
    label = f"ori={trial['orientation']}, sf={trial['spatial_frequency']}, phase={trial['phase']}"
    trial_labels.append(label)

# --- Build DataFrame for seaborn heatmap ---
heatmap_df = pd.DataFrame(trial_responses, index=trial_labels)

# --- Plot heatmap ---
plt.figure(figsize=(14,8))
sns.heatmap(heatmap_df, cmap="viridis", cbar_kws={"label": "dF/F"})
plt.title(f"Cell {cell_id} dF/F Heatmap\nExperiment {exp_id} | Static Gratings (Session B)")
plt.xlabel("Time (frames relative to stim onset)")
plt.ylabel("Trials (ori, sf, phase)")
plt.show()